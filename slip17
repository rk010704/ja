1. Write a java program to accept ‘N’ integers from a user. Store and display integers in
sorted order having proper collection class. The collection should not accept duplicate
elements.

import java.util.Scanner;
import java.util.TreeSet;
public class SortedIntegerCollection {
public static void main(String[] args) {
Scanner scanner = new Scanner(System.in);
// Accept 'N' integers from the user
System.out.print("Enter the value of N: ");
int n = scanner.nextInt();
// Create a TreeSet to store integers in sorted order without duplicates
TreeSet<Integer> integerSet = new TreeSet<>();
// Accept integers from the user and add them to the TreeSet
for (int i = 0; i < n; i++) {
System.out.print("Enter integer " + (i + 1) + ": ");
int inputInt = scanner.nextInt();
integerSet.add(inputInt);
}
// Display the integers in sorted order
System.out.println("Integers in sorted order:");
for (int num : integerSet) {
System.out.println(num);
}
scanner.close();}
}



2. Write a Multithreading program in java to display the number’s between 1 to 100
continuously in a TextField by clicking on button. (Use Runnable Interface).


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class NumberDisplayApp extends JFrame implements ActionListener {
    private JTextField textField;
    private JButton startButton;
    private volatile boolean running = false;

    public NumberDisplayApp() {
        // Set up the frame
        setTitle("Number Display");
        setSize(300, 100);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new FlowLayout());

        // Create components
        textField = new JTextField(10);
        startButton = new JButton("Start");

        // Add components to the frame
        add(textField);
        add(startButton);

        // Add action listener to the button
        startButton.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (!running) {
            running = true;
            startButton.setEnabled(false); // Disable the button while running
            new Thread(new NumberRunnable()).start(); // Start the number display thread
        }
    }

    private class NumberRunnable implements Runnable {
        @Override
        public void run() {
            for (int i = 1; i <= 100; i++) {
                // Update the text field with the current number
                textField.setText(String.valueOf(i));
                try {
                    Thread.sleep(1000); // Sleep for 1 second
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt(); // Restore interrupted status
                }
            }
            running = false; // Reset running flag
            startButton.setEnabled(true); // Re-enable the button
        }
    }

    public static void main(String[] args) {
        // Create and display the GUI
        SwingUtilities.invokeLater(() -> {
            NumberDisplayApp app = new NumberDisplayApp();
            app.setVisible(true);
        });
    }
}
